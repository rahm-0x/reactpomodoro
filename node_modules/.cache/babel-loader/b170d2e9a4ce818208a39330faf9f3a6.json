{"ast":null,"code":"var _jsxFileName = \"/Users/phoenixrabang/Desktop/Thinkful/pomodoroTimer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.js\";\nimport React from \"react\"; //function to calculate the percentage of time remaining in the session and is passed to the progress bar\n\nfunction ProgressBar({\n  session,\n  timeRemaining,\n  focusDuration,\n  breakDuration\n}) {\n  function percentElapsed(session, timeRemaining, focusDuration, breakDuration) {\n    const focusTime = focusDuration * 60;\n    const breakTime = breakDuration * 60;\n    const breakDiff = breakTime - timeRemaining;\n    const focusDiff = focusTime - timeRemaining;\n\n    if (session.label === \"On Break\") {\n      return breakDiff / breakTime * 100;\n    } else {\n      return focusDiff / focusTime * 100;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percentElapsed(session, timeRemaining, focusDuration, breakDuration),\n    style: {\n      width: `${percentElapsed(session, timeRemaining, focusDuration, breakDuration)}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/phoenixrabang/Desktop/Thinkful/pomodoroTimer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.js"],"names":["React","ProgressBar","session","timeRemaining","focusDuration","breakDuration","percentElapsed","focusTime","breakTime","breakDiff","focusDiff","label","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA,aAA1B;AAAyCC,EAAAA;AAAzC,CAArB,EAA+E;AAC7E,WAASC,cAAT,CACEJ,OADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,aAJF,EAKE;AACA,UAAME,SAAS,GAAGH,aAAa,GAAG,EAAlC;AACA,UAAMI,SAAS,GAAGH,aAAa,GAAG,EAAlC;AAEA,UAAMI,SAAS,GAAGD,SAAS,GAAGL,aAA9B;AACA,UAAMO,SAAS,GAAGH,SAAS,GAAGJ,aAA9B;;AAEA,QAAID,OAAO,CAACS,KAAR,KAAkB,UAAtB,EAAkC;AAChC,aAAQF,SAAS,GAAGD,SAAb,GAA0B,GAAjC;AACD,KAFD,MAEO;AACL,aAAQE,SAAS,GAAGH,SAAb,GAA0B,GAAjC;AACD;AACF;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,cAAc,CAC3BJ,OAD2B,EAE3BC,aAF2B,EAG3BC,aAH2B,EAI3BC,aAJ2B,CAL/B;AAWE,IAAA,KAAK,EAAE;AACLO,MAAAA,KAAK,EAAG,GAAEN,cAAc,CACtBJ,OADsB,EAEtBC,aAFsB,EAGtBC,aAHsB,EAItBC,aAJsB,CAKtB;AANG,KAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsBD;;AAED,eAAeJ,WAAf","sourcesContent":["import React from \"react\";\n\n//function to calculate the percentage of time remaining in the session and is passed to the progress bar\n\nfunction ProgressBar({ session, timeRemaining, focusDuration, breakDuration }) {\n  function percentElapsed(\n    session,\n    timeRemaining,\n    focusDuration,\n    breakDuration\n  ) {\n    const focusTime = focusDuration * 60;\n    const breakTime = breakDuration * 60;\n\n    const breakDiff = breakTime - timeRemaining;\n    const focusDiff = focusTime - timeRemaining;\n\n    if (session.label === \"On Break\") {\n      return (breakDiff / breakTime) * 100;\n    } else {\n      return (focusDiff / focusTime) * 100;\n    }\n  }\n\n  return (\n    <div\n      className=\"progress-bar\"\n      role=\"progressbar\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n      aria-valuenow={percentElapsed(\n        session,\n        timeRemaining,\n        focusDuration,\n        breakDuration\n      )}\n      style={{\n        width: `${percentElapsed(\n          session,\n          timeRemaining,\n          focusDuration,\n          breakDuration\n        )}%`,\n      }}\n    />\n  );\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}